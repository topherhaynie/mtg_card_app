[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mtg-card-app"
version = "0.1.0"
description = "An application for finding new MTG card combos"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "topherhaynie"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "requests~=2.32",
    "chromadb~=1.2",
    "sentence-transformers~=5.1",
    "torch~=2.5",
    "mcp>=1,<2",
    # Configuration management
    "tomli~=2.0; python_version < '3.11'",
    "tomli-w~=1.0",
    # CLI dependencies
    "click~=8.1",
    "rich~=13.9",
]

[project.optional-dependencies]
# LLM Provider dependencies (install only what you need)
openai = ["openai~=1.0"]
anthropic = ["anthropic~=0.39"]
gemini = ["google-generativeai~=0.8"]
groq = ["groq~=0.11"]
all-providers = [
    "openai~=1.0",
    "anthropic~=0.39",
    "google-generativeai~=0.8",
    "groq~=0.11",
]

# Development dependencies
dev = [
    "pytest~=8.3",
    "pytest-cov~=6.0",
    "pytest-mock~=3.14",
]

[project.scripts]
mtg = "mtg_card_app.ui.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["mtg_card_app*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "e2e: marks tests as end-to-end (deselect with '-m \"not e2e\"')",
    "config: marks tests for configuration and provider system (select with '-m config')",
    "config_manager: marks tests for Config class only (select with '-m config_manager')",
    "config_provider: marks tests for ProviderFactory (select with '-m config_provider')",
]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
# Enable essential rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
]

# Ignore non-critical rules
ignore = [
    "E501",  # line too long (let formatter handle it)
    "B008",  # function calls in argument defaults
    "N802",  # function name should be lowercase
    "N803",  # argument name should be lowercase
    "N806",  # variable in function should be lowercase
    "UP006", # use-pep585-annotation (Optional[X] vs X | None)
    "UP007", # use-pep604-annotation (Union[X, Y] vs X | Y)
    "FBT001", # boolean-typed positional argument
    "FBT002", # boolean default positional argument
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "E501",  # line too long in tests
    "F841",  # local variable assigned but never used (test code)
]
"examples/**/*.py" = [
    "E402",  # module level import not at top of file
    "B007",  # loop control variable not used
    "T201",  # print found (demos use print)
]
"scripts/**/*.py" = [
    "E402",  # module level import not at top of file
    "B007",  # loop control variable not used  
    "T201",  # print found (scripts use print)
]

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = false

